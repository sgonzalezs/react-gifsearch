{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAbS,SAACC,GAChBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAACS,GACX,MAAM,CAAEP,GAAR,mBAAuBO,OAE3BN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBY,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DACXC,EADW,iDACmCC,UAAUH,GAD7C,+DAGAI,MAAMF,GAHN,cAGXG,EAHW,gBAIEA,EAAKC,OAJP,uBAIVC,EAJU,EAIVA,KAEDC,EAAKD,EAAKE,KAAI,SAACC,GAAO,IAAD,EACvB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAVxB,kBAaVM,GAbU,4CAAD,sDCCPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECHsB,SAACA,GAEvB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAACC,GACHH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGjB,CAACpB,IAEGqB,EDdsBK,CAAa1B,GAA9Ba,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAGpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAS,mBAAGJ,UAAU,mCAAb,yBACV,qBAAKA,UAAU,YAAf,SAEKH,EAAOJ,KAAI,SAACC,GACT,OACI,cAAC,EAAD,eAEQA,GADCA,EAAIC,aE2BtBgB,EAzCI,WAEf,MAAoCzC,mBAAS,CAAC,UAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAoBA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEQS,EAAWe,KAAI,SAACT,GACZ,OACI,cAAC,EAAD,CAEIA,SAAUA,GADLA,U,MC9BrC4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.f5954bf5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange=(e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length>2){\r\n            setCategories((categories)=>{\r\n                return [inputValue, ...categories]\r\n            });\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            /> \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories:PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs=async(category)=>{\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=5EmcLbSc2ZvPRdz0E7xJoBUbjvvYoBe3`;\r\n\r\n    const resp=await fetch(url);\r\n    const {data}=await resp.json();\r\n\r\n    const gifs=data.map((img)=>{\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>       \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading}=useFetchGifs(category);\r\n   \r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n            {loading&&<p className='animate__animated animate__flash'>Cargando...</p>}\r\n            <div className='card-grid'>\r\n                \r\n                {images.map((img)=>{\r\n                    return(\r\n                        <GifGridItem \r\n                            key={img.id} \r\n                            {...img}\r\n                        />\r\n                    )\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs=(category)=>{\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n        .then((imgs)=>{\r\n            setState({\r\n                data:imgs,\r\n                loading:false\r\n            });\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n\r\n}","import React, {useState} from 'react';\r\nimport {AddCategory} from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp=()=>{\r\n\r\n    const [categories, setCategories] = useState(['space'])\r\n\r\n    // const handleAdd=()=>{\r\n    //     /**\r\n    //      * 1 - Obtenemos las categorias del primer estado con ...categories\r\n    //      * y agregamos la nueva categoria (Space)\r\n    //      */\r\n\r\n    //     // const newCategories=[...categories, 'Space'];\r\n    //     // setCategories(newCategories);\r\n\r\n    //     /**\r\n    //      * 2 - Obtenemos el estado anterior por medio de un callback\r\n    //      * y agregamos la nueva categoria (Space)\r\n    //      */\r\n    //     setCategories((catgs)=>{\r\n    //         return [...catgs, 'space'];\r\n    //     });\r\n    // }\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n                {\r\n                    categories.map((category)=>{\r\n                        return(\r\n                            <GifGrid \r\n                                key={category} \r\n                                category={category} \r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}